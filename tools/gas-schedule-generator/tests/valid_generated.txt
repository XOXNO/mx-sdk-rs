// Code generated by gas schedule generator. DO NOT EDIT.

// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
// !!!!!!!!!!!!!!!!!!!!!! AUTO-GENERATED FILE !!!!!!!!!!!!!!!!!!!!!!
// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

use serde::{Deserialize, Serialize};

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
#[serde(default)]
pub struct BuiltInCost {
    #[serde(rename = "ChangeOwnerAddress", default)]
    pub change_owner_address: u64,
    #[serde(rename = "ClaimDeveloperRewards", default)]
    pub claim_developer_rewards: u64,
    #[serde(rename = "SaveUserName", default)]
    pub save_user_name: u64,
    #[serde(rename = "SaveKeyValue", default)]
    pub save_key_value: u64,
    #[serde(rename = "ESDTTransfer", default)]
    pub esdt_transfer: u64,
    #[serde(rename = "ESDTBurn", default)]
    pub esdt_burn: u64,
    #[serde(rename = "ESDTLocalMint", default)]
    pub esdt_local_mint: u64,
    #[serde(rename = "ESDTLocalBurn", default)]
    pub esdt_local_burn: u64,
    #[serde(rename = "ESDTNFTCreate", default)]
    pub esdtnft_create: u64,
    #[serde(rename = "ESDTNFTAddQuantity", default)]
    pub esdtnft_add_quantity: u64,
    #[serde(rename = "ESDTNFTBurn", default)]
    pub esdtnft_burn: u64,
    #[serde(rename = "ESDTNFTTransfer", default)]
    pub esdtnft_transfer: u64,
    #[serde(rename = "ESDTNFTChangeCreateOwner", default)]
    pub esdtnft_change_create_owner: u64,
    #[serde(rename = "ESDTNFTAddUri", default)]
    pub esdtnft_add_uri: u64,
    #[serde(rename = "ESDTNFTUpdateAttributes", default)]
    pub esdtnft_update_attributes: u64,
    #[serde(rename = "ESDTNFTMultiTransfer", default)]
    pub esdtnft_multi_transfer: u64,
    #[serde(rename = "MultiESDTNFTTransfer", default)]
    pub multi_esdtnft_transfer: u64,
    #[serde(rename = "ESDTModifyRoyalties", default)]
    pub esdt_modify_royalties: u64,
    #[serde(rename = "ESDTModifyCreator", default)]
    pub esdt_modify_creator: u64,
    #[serde(rename = "ESDTNFTRecreate", default)]
    pub esdtnft_recreate: u64,
    #[serde(rename = "ESDTNFTUpdate", default)]
    pub esdtnft_update: u64,
    #[serde(rename = "ESDTNFTSetNewURIs", default)]
    pub esdtnft_set_new_ur_is: u64,
    #[serde(rename = "SetGuardian", default)]
    pub set_guardian: u64,
    #[serde(rename = "GuardAccount", default)]
    pub guard_account: u64,
    #[serde(rename = "UnGuardAccount", default)]
    pub un_guard_account: u64,
    #[serde(rename = "TrieLoadPerNode", default)]
    pub trie_load_per_node: u64,
    #[serde(rename = "TrieStorePerNode", default)]
    pub trie_store_per_node: u64,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
#[serde(default)]
pub struct MetaChainSystemSCsCost {
    #[serde(rename = "Stake", default)]
    pub stake: u64,
    #[serde(rename = "UnStake", default)]
    pub un_stake: u64,
    #[serde(rename = "UnBond", default)]
    pub un_bond: u64,
    #[serde(rename = "Claim", default)]
    pub claim: u64,
    #[serde(rename = "Get", default)]
    pub get: u64,
    #[serde(rename = "ChangeRewardAddress", default)]
    pub change_reward_address: u64,
    #[serde(rename = "ChangeValidatorKeys", default)]
    pub change_validator_keys: u64,
    #[serde(rename = "UnJail", default)]
    pub un_jail: u64,
    #[serde(rename = "DelegationOps", default)]
    pub delegation_ops: u64,
    #[serde(rename = "DelegationMgrOps", default)]
    pub delegation_mgr_ops: u64,
    #[serde(rename = "ValidatorToDelegation", default)]
    pub validator_to_delegation: u64,
    #[serde(rename = "ESDTIssue", default)]
    pub esdt_issue: u64,
    #[serde(rename = "ESDTOperations", default)]
    pub esdt_operations: u64,
    #[serde(rename = "Proposal", default)]
    pub proposal: u64,
    #[serde(rename = "Vote", default)]
    pub vote: u64,
    #[serde(rename = "DelegateVote", default)]
    pub delegate_vote: u64,
    #[serde(rename = "RevokeVote", default)]
    pub revoke_vote: u64,
    #[serde(rename = "CloseProposal", default)]
    pub close_proposal: u64,
    #[serde(rename = "GetAllNodeStates", default)]
    pub get_all_node_states: u64,
    #[serde(rename = "UnstakeTokens", default)]
    pub unstake_tokens: u64,
    #[serde(rename = "UnbondTokens", default)]
    pub unbond_tokens: u64,
    #[serde(rename = "GetActiveFund", default)]
    pub get_active_fund: u64,
    #[serde(rename = "FixWaitingListSize", default)]
    pub fix_waiting_list_size: u64,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
#[serde(default)]
pub struct BaseOperationCost {
    #[serde(rename = "StorePerByte", default)]
    pub store_per_byte: u64,
    #[serde(rename = "ReleasePerByte", default)]
    pub release_per_byte: u64,
    #[serde(rename = "DataCopyPerByte", default)]
    pub data_copy_per_byte: u64,
    #[serde(rename = "PersistPerByte", default)]
    pub persist_per_byte: u64,
    #[serde(rename = "CompilePerByte", default)]
    pub compile_per_byte: u64,
    #[serde(rename = "AoTPreparePerByte", default)]
    pub ao_t_prepare_per_byte: u64,
    #[serde(rename = "GetCode", default)]
    pub get_code: u64,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
#[serde(default)]
pub struct BaseOpsAPICost {
    #[serde(rename = "GetSCAddress", default)]
    pub get_sc_address: u64,
    #[serde(rename = "GetOwnerAddress", default)]
    pub get_owner_address: u64,
    #[serde(rename = "IsSmartContract", default)]
    pub is_smart_contract: u64,
    #[serde(rename = "GetShardOfAddress", default)]
    pub get_shard_of_address: u64,
    #[serde(rename = "GetExternalBalance", default)]
    pub get_external_balance: u64,
    #[serde(rename = "GetBlockHash", default)]
    pub get_block_hash: u64,
    #[serde(rename = "TransferValue", default)]
    pub transfer_value: u64,
    #[serde(rename = "GetArgument", default)]
    pub get_argument: u64,
    #[serde(rename = "GetFunction", default)]
    pub get_function: u64,
    #[serde(rename = "GetNumArguments", default)]
    pub get_num_arguments: u64,
    #[serde(rename = "StorageStore", default)]
    pub storage_store: u64,
    #[serde(rename = "StorageLoad", default)]
    pub storage_load: u64,
    #[serde(rename = "CachedStorageLoad", default)]
    pub cached_storage_load: u64,
    #[serde(rename = "GetCaller", default)]
    pub get_caller: u64,
    #[serde(rename = "GetCallValue", default)]
    pub get_call_value: u64,
    #[serde(rename = "Log", default)]
    pub log: u64,
    #[serde(rename = "Finish", default)]
    pub finish: u64,
    #[serde(rename = "SignalError", default)]
    pub signal_error: u64,
    #[serde(rename = "GetBlockTimeStamp", default)]
    pub get_block_time_stamp: u64,
    #[serde(rename = "GetGasLeft", default)]
    pub get_gas_left: u64,
    #[serde(rename = "Int64GetArgument", default)]
    pub int_64_get_argument: u64,
    #[serde(rename = "Int64StorageStore", default)]
    pub int_64_storage_store: u64,
    #[serde(rename = "Int64StorageLoad", default)]
    pub int_64_storage_load: u64,
    #[serde(rename = "Int64Finish", default)]
    pub int_64_finish: u64,
    #[serde(rename = "GetStateRootHash", default)]
    pub get_state_root_hash: u64,
    #[serde(rename = "GetBlockNonce", default)]
    pub get_block_nonce: u64,
    #[serde(rename = "GetBlockEpoch", default)]
    pub get_block_epoch: u64,
    #[serde(rename = "GetBlockRound", default)]
    pub get_block_round: u64,
    #[serde(rename = "GetBlockRandomSeed", default)]
    pub get_block_random_seed: u64,
    #[serde(rename = "ExecuteOnSameContext", default)]
    pub execute_on_same_context: u64,
    #[serde(rename = "ExecuteOnDestContext", default)]
    pub execute_on_dest_context: u64,
    #[serde(rename = "DelegateExecution", default)]
    pub delegate_execution: u64,
    #[serde(rename = "AsyncCallStep", default)]
    pub async_call_step: u64,
    #[serde(rename = "AsyncCallbackGasLock", default)]
    pub async_callback_gas_lock: u64,
    #[serde(rename = "ExecuteReadOnly", default)]
    pub execute_read_only: u64,
    #[serde(rename = "CreateContract", default)]
    pub create_contract: u64,
    #[serde(rename = "GetReturnData", default)]
    pub get_return_data: u64,
    #[serde(rename = "GetNumReturnData", default)]
    pub get_num_return_data: u64,
    #[serde(rename = "GetReturnDataSize", default)]
    pub get_return_data_size: u64,
    #[serde(rename = "GetOriginalTxHash", default)]
    pub get_original_tx_hash: u64,
    #[serde(rename = "CleanReturnData", default)]
    pub clean_return_data: u64,
    #[serde(rename = "DeleteFromReturnData", default)]
    pub delete_from_return_data: u64,
    #[serde(rename = "GetPrevTxHash", default)]
    pub get_prev_tx_hash: u64,
    #[serde(rename = "GetCurrentTxHash", default)]
    pub get_current_tx_hash: u64,
    #[serde(rename = "CreateAsyncCall", default)]
    pub create_async_call: u64,
    #[serde(rename = "SetAsyncCallback", default)]
    pub set_async_callback: u64,
    #[serde(rename = "SetAsyncGroupCallback", default)]
    pub set_async_group_callback: u64,
    #[serde(rename = "SetAsyncContextCallback", default)]
    pub set_async_context_callback: u64,
    #[serde(rename = "GetCallbackClosure", default)]
    pub get_callback_closure: u64,
    #[serde(rename = "GetCodeMetadata", default)]
    pub get_code_metadata: u64,
    #[serde(rename = "IsBuiltinFunction", default)]
    pub is_builtin_function: u64,
    #[serde(rename = "IsReservedFunctionName", default)]
    pub is_reserved_function_name: u64,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
#[serde(default)]
pub struct EthAPICost {
    #[serde(rename = "UseGas", default)]
    pub use_gas: u64,
    #[serde(rename = "GetAddress", default)]
    pub get_address: u64,
    #[serde(rename = "GetExternalBalance", default)]
    pub get_external_balance: u64,
    #[serde(rename = "GetBlockHash", default)]
    pub get_block_hash: u64,
    #[serde(rename = "Call", default)]
    pub call: u64,
    #[serde(rename = "CallDataCopy", default)]
    pub call_data_copy: u64,
    #[serde(rename = "GetCallDataSize", default)]
    pub get_call_data_size: u64,
    #[serde(rename = "CallCode", default)]
    pub call_code: u64,
    #[serde(rename = "CallDelegate", default)]
    pub call_delegate: u64,
    #[serde(rename = "CallStatic", default)]
    pub call_static: u64,
    #[serde(rename = "StorageStore", default)]
    pub storage_store: u64,
    #[serde(rename = "StorageLoad", default)]
    pub storage_load: u64,
    #[serde(rename = "GetCaller", default)]
    pub get_caller: u64,
    #[serde(rename = "GetCallValue", default)]
    pub get_call_value: u64,
    #[serde(rename = "CodeCopy", default)]
    pub code_copy: u64,
    #[serde(rename = "GetCodeSize", default)]
    pub get_code_size: u64,
    #[serde(rename = "GetBlockCoinbase", default)]
    pub get_block_coinbase: u64,
    #[serde(rename = "Create", default)]
    pub create: u64,
    #[serde(rename = "GetBlockDifficulty", default)]
    pub get_block_difficulty: u64,
    #[serde(rename = "ExternalCodeCopy", default)]
    pub external_code_copy: u64,
    #[serde(rename = "GetExternalCodeSize", default)]
    pub get_external_code_size: u64,
    #[serde(rename = "GetGasLeft", default)]
    pub get_gas_left: u64,
    #[serde(rename = "GetBlockGasLimit", default)]
    pub get_block_gas_limit: u64,
    #[serde(rename = "GetTxGasPrice", default)]
    pub get_tx_gas_price: u64,
    #[serde(rename = "Log", default)]
    pub log: u64,
    #[serde(rename = "GetBlockNumber", default)]
    pub get_block_number: u64,
    #[serde(rename = "GetTxOrigin", default)]
    pub get_tx_origin: u64,
    #[serde(rename = "Finish", default)]
    pub finish: u64,
    #[serde(rename = "Revert", default)]
    pub revert: u64,
    #[serde(rename = "GetReturnDataSize", default)]
    pub get_return_data_size: u64,
    #[serde(rename = "ReturnDataCopy", default)]
    pub return_data_copy: u64,
    #[serde(rename = "SelfDestruct", default)]
    pub self_destruct: u64,
    #[serde(rename = "GetBlockTimeStamp", default)]
    pub get_block_time_stamp: u64,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
#[serde(default)]
pub struct BigIntAPICost {
    #[serde(rename = "BigIntNew", default)]
    pub big_int_new: u64,
    #[serde(rename = "BigIntByteLength", default)]
    pub big_int_byte_length: u64,
    #[serde(rename = "BigIntUnsignedByteLength", default)]
    pub big_int_unsigned_byte_length: u64,
    #[serde(rename = "BigIntSignedByteLength", default)]
    pub big_int_signed_byte_length: u64,
    #[serde(rename = "BigIntGetBytes", default)]
    pub big_int_get_bytes: u64,
    #[serde(rename = "BigIntGetUnsignedBytes", default)]
    pub big_int_get_unsigned_bytes: u64,
    #[serde(rename = "BigIntGetSignedBytes", default)]
    pub big_int_get_signed_bytes: u64,
    #[serde(rename = "BigIntSetBytes", default)]
    pub big_int_set_bytes: u64,
    #[serde(rename = "BigIntSetUnsignedBytes", default)]
    pub big_int_set_unsigned_bytes: u64,
    #[serde(rename = "BigIntSetSignedBytes", default)]
    pub big_int_set_signed_bytes: u64,
    #[serde(rename = "BigIntIsInt64", default)]
    pub big_int_is_int_64: u64,
    #[serde(rename = "BigIntGetInt64", default)]
    pub big_int_get_int_64: u64,
    #[serde(rename = "BigIntSetInt64", default)]
    pub big_int_set_int_64: u64,
    #[serde(rename = "BigIntAdd", default)]
    pub big_int_add: u64,
    #[serde(rename = "BigIntSub", default)]
    pub big_int_sub: u64,
    #[serde(rename = "BigIntMul", default)]
    pub big_int_mul: u64,
    #[serde(rename = "BigIntSqrt", default)]
    pub big_int_sqrt: u64,
    #[serde(rename = "BigIntPow", default)]
    pub big_int_pow: u64,
    #[serde(rename = "BigIntLog", default)]
    pub big_int_log: u64,
    #[serde(rename = "BigIntTDiv", default)]
    pub big_int_t_div: u64,
    #[serde(rename = "BigIntTMod", default)]
    pub big_int_t_mod: u64,
    #[serde(rename = "BigIntEDiv", default)]
    pub big_int_e_div: u64,
    #[serde(rename = "BigIntEMod", default)]
    pub big_int_e_mod: u64,
    #[serde(rename = "BigIntAbs", default)]
    pub big_int_abs: u64,
    #[serde(rename = "BigIntNeg", default)]
    pub big_int_neg: u64,
    #[serde(rename = "BigIntSign", default)]
    pub big_int_sign: u64,
    #[serde(rename = "BigIntCmp", default)]
    pub big_int_cmp: u64,
    #[serde(rename = "BigIntNot", default)]
    pub big_int_not: u64,
    #[serde(rename = "BigIntAnd", default)]
    pub big_int_and: u64,
    #[serde(rename = "BigIntOr", default)]
    pub big_int_or: u64,
    #[serde(rename = "BigIntXor", default)]
    pub big_int_xor: u64,
    #[serde(rename = "BigIntShr", default)]
    pub big_int_shr: u64,
    #[serde(rename = "BigIntShl", default)]
    pub big_int_shl: u64,
    #[serde(rename = "BigIntFinishUnsigned", default)]
    pub big_int_finish_unsigned: u64,
    #[serde(rename = "BigIntFinishSigned", default)]
    pub big_int_finish_signed: u64,
    #[serde(rename = "BigIntStorageLoadUnsigned", default)]
    pub big_int_storage_load_unsigned: u64,
    #[serde(rename = "BigIntStorageStoreUnsigned", default)]
    pub big_int_storage_store_unsigned: u64,
    #[serde(rename = "BigIntGetArgument", default)]
    pub big_int_get_argument: u64,
    #[serde(rename = "BigIntGetUnsignedArgument", default)]
    pub big_int_get_unsigned_argument: u64,
    #[serde(rename = "BigIntGetSignedArgument", default)]
    pub big_int_get_signed_argument: u64,
    #[serde(rename = "BigIntGetCallValue", default)]
    pub big_int_get_call_value: u64,
    #[serde(rename = "BigIntGetExternalBalance", default)]
    pub big_int_get_external_balance: u64,
    #[serde(rename = "CopyPerByteForTooBig", default)]
    pub copy_per_byte_for_too_big: u64,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
#[serde(default)]
pub struct CryptoAPICost {
    #[serde(rename = "SHA256", default)]
    pub sha_256: u64,
    #[serde(rename = "Keccak256", default)]
    pub keccak_256: u64,
    #[serde(rename = "Ripemd160", default)]
    pub ripemd_160: u64,
    #[serde(rename = "VerifyBLS", default)]
    pub verify_bls: u64,
    #[serde(rename = "VerifyEd25519", default)]
    pub verify_ed_25519: u64,
    #[serde(rename = "VerifySecp256k1", default)]
    pub verify_secp_256_k_1: u64,
    #[serde(rename = "EllipticCurveNew", default)]
    pub elliptic_curve_new: u64,
    #[serde(rename = "AddECC", default)]
    pub add_ecc: u64,
    #[serde(rename = "DoubleECC", default)]
    pub double_ecc: u64,
    #[serde(rename = "IsOnCurveECC", default)]
    pub is_on_curve_ecc: u64,
    #[serde(rename = "ScalarMultECC", default)]
    pub scalar_mult_ecc: u64,
    #[serde(rename = "MarshalECC", default)]
    pub marshal_ecc: u64,
    #[serde(rename = "MarshalCompressedECC", default)]
    pub marshal_compressed_ecc: u64,
    #[serde(rename = "UnmarshalECC", default)]
    pub unmarshal_ecc: u64,
    #[serde(rename = "UnmarshalCompressedECC", default)]
    pub unmarshal_compressed_ecc: u64,
    #[serde(rename = "GenerateKeyECC", default)]
    pub generate_key_ecc: u64,
    #[serde(rename = "EncodeDERSig", default)]
    pub encode_der_sig: u64,
    #[serde(rename = "VerifySecp256r1", default)]
    pub verify_secp_256_r_1: u64,
    #[serde(rename = "VerifyBLSSignatureShare", default)]
    pub verify_bls_signature_share: u64,
    #[serde(rename = "VerifyBLSMultiSig", default)]
    pub verify_bls_multi_sig: u64,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
#[serde(default)]
pub struct ManagedBufferAPICost {
    #[serde(rename = "MBufferNew", default)]
    pub m_buffer_new: u64,
    #[serde(rename = "MBufferNewFromBytes", default)]
    pub m_buffer_new_from_bytes: u64,
    #[serde(rename = "MBufferGetLength", default)]
    pub m_buffer_get_length: u64,
    #[serde(rename = "MBufferGetBytes", default)]
    pub m_buffer_get_bytes: u64,
    #[serde(rename = "MBufferGetByteSlice", default)]
    pub m_buffer_get_byte_slice: u64,
    #[serde(rename = "MBufferCopyByteSlice", default)]
    pub m_buffer_copy_byte_slice: u64,
    #[serde(rename = "MBufferSetBytes", default)]
    pub m_buffer_set_bytes: u64,
    #[serde(rename = "MBufferAppend", default)]
    pub m_buffer_append: u64,
    #[serde(rename = "MBufferAppendBytes", default)]
    pub m_buffer_append_bytes: u64,
    #[serde(rename = "MBufferToBigIntUnsigned", default)]
    pub m_buffer_to_big_int_unsigned: u64,
    #[serde(rename = "MBufferToBigIntSigned", default)]
    pub m_buffer_to_big_int_signed: u64,
    #[serde(rename = "MBufferFromBigIntUnsigned", default)]
    pub m_buffer_from_big_int_unsigned: u64,
    #[serde(rename = "MBufferFromBigIntSigned", default)]
    pub m_buffer_from_big_int_signed: u64,
    #[serde(rename = "MBufferStorageStore", default)]
    pub m_buffer_storage_store: u64,
    #[serde(rename = "MBufferStorageLoad", default)]
    pub m_buffer_storage_load: u64,
    #[serde(rename = "MBufferGetArgument", default)]
    pub m_buffer_get_argument: u64,
    #[serde(rename = "MBufferFinish", default)]
    pub m_buffer_finish: u64,
    #[serde(rename = "MBufferSetRandom", default)]
    pub m_buffer_set_random: u64,
    #[serde(rename = "MBufferToBigFloat", default)]
    pub m_buffer_to_big_float: u64,
    #[serde(rename = "MBufferFromBigFloat", default)]
    pub m_buffer_from_big_float: u64,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
#[serde(default)]
pub struct BigFloatAPICost {
    #[serde(rename = "BigFloatNewFromParts", default)]
    pub big_float_new_from_parts: u64,
    #[serde(rename = "BigFloatAdd", default)]
    pub big_float_add: u64,
    #[serde(rename = "BigFloatSub", default)]
    pub big_float_sub: u64,
    #[serde(rename = "BigFloatMul", default)]
    pub big_float_mul: u64,
    #[serde(rename = "BigFloatDiv", default)]
    pub big_float_div: u64,
    #[serde(rename = "BigFloatTruncate", default)]
    pub big_float_truncate: u64,
    #[serde(rename = "BigFloatNeg", default)]
    pub big_float_neg: u64,
    #[serde(rename = "BigFloatClone", default)]
    pub big_float_clone: u64,
    #[serde(rename = "BigFloatCmp", default)]
    pub big_float_cmp: u64,
    #[serde(rename = "BigFloatAbs", default)]
    pub big_float_abs: u64,
    #[serde(rename = "BigFloatSqrt", default)]
    pub big_float_sqrt: u64,
    #[serde(rename = "BigFloatPow", default)]
    pub big_float_pow: u64,
    #[serde(rename = "BigFloatFloor", default)]
    pub big_float_floor: u64,
    #[serde(rename = "BigFloatCeil", default)]
    pub big_float_ceil: u64,
    #[serde(rename = "BigFloatIsInt", default)]
    pub big_float_is_int: u64,
    #[serde(rename = "BigFloatSetBigInt", default)]
    pub big_float_set_big_int: u64,
    #[serde(rename = "BigFloatSetInt64", default)]
    pub big_float_set_int_64: u64,
    #[serde(rename = "BigFloatGetConst", default)]
    pub big_float_get_const: u64,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
#[serde(default)]
pub struct MaxPerTransaction {
    #[serde(rename = "MaxBuiltInCallsPerTx", default)]
    pub max_built_in_calls_per_tx: u64,
    #[serde(rename = "MaxNumberOfTransfersPerTx", default)]
    pub max_number_of_transfers_per_tx: u64,
    #[serde(rename = "MaxNumberOfTrieReadsPerTx", default)]
    pub max_number_of_trie_reads_per_tx: u64,
}

#[derive(Serialize, Deserialize, Clone, Debug, Default, PartialEq)]
#[serde(default)]
pub struct DynamicStorageLoad {
    #[serde(rename = "QuadraticCoefficient", default)]
    pub quadratic_coefficient: u64,
    #[serde(rename = "SignOfQuadratic", default)]
    pub sign_of_quadratic: u64,
    #[serde(rename = "LinearCoefficient", default)]
    pub linear_coefficient: u64,
    #[serde(rename = "SignOfLinear", default)]
    pub sign_of_linear: u64,
    #[serde(rename = "ConstantCoefficient", default)]
    pub constant_coefficient: u64,
    #[serde(rename = "SignOfConstant", default)]
    pub sign_of_constant: u64,
    #[serde(rename = "MinimumGasCost", default)]
    pub minimum_gas_cost: u64,
}

