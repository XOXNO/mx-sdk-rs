// Code generated by the multiversx-sc proxy generator. DO NOT EDIT.

////////////////////////////////////////////////////
////////////////// AUTO-GENERATED //////////////////
////////////////////////////////////////////////////

#![allow(dead_code)]
#![allow(clippy::all)]

use multiversx_sc::proxy_imports::*;

pub struct RustTestingFrameworkTesterProxy;

impl<Env, From, To, Gas> TxProxyTrait<Env, From, To, Gas> for RustTestingFrameworkTesterProxy
where
    Env: TxEnv,
    From: TxFrom<Env>,
    To: TxTo<Env>,
    Gas: TxGas<Env>,
{
    type TxProxyMethods = RustTestingFrameworkTesterProxyMethods<Env, From, To, Gas>;

    fn proxy_methods(self, tx: Tx<Env, From, To, (), Gas, (), ()>) -> Self::TxProxyMethods {
        RustTestingFrameworkTesterProxyMethods { wrapped_tx: tx }
    }
}

pub struct RustTestingFrameworkTesterProxyMethods<Env, From, To, Gas>
where
    Env: TxEnv,
    From: TxFrom<Env>,
    To: TxTo<Env>,
    Gas: TxGas<Env>,
{
    wrapped_tx: Tx<Env, From, To, (), Gas, (), ()>,
}

#[rustfmt::skip]
impl<Env, From, Gas> RustTestingFrameworkTesterProxyMethods<Env, From, (), Gas>
where
    Env: TxEnv,
    Env::Api: VMApi,
    From: TxFrom<Env>,
    Gas: TxGas<Env>,
{
    pub fn init(
        self,
    ) -> TxTypedDeploy<Env, From, NotPayable, Gas, ManagedBuffer<Env::Api>> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_deploy()
            .original_result()
    }
}

#[rustfmt::skip]
impl<Env, From, To, Gas> RustTestingFrameworkTesterProxyMethods<Env, From, To, Gas>
where
    Env: TxEnv,
    Env::Api: VMApi,
    From: TxFrom<Env>,
    To: TxTo<Env>,
    Gas: TxGas<Env>,
{
    pub fn sum<
        Arg0: ProxyArg<BigUint<Env::Api>>,
        Arg1: ProxyArg<BigUint<Env::Api>>,
    >(
        self,
        first: Arg0,
        second: Arg1,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, BigUint<Env::Api>> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("sum")
            .argument(&first)
            .argument(&second)
            .original_result()
    }

    pub fn sum_sc_result<
        Arg0: ProxyArg<BigUint<Env::Api>>,
        Arg1: ProxyArg<BigUint<Env::Api>>,
    >(
        self,
        first: Arg0,
        second: Arg1,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, BigUint<Env::Api>> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("sum_sc_result")
            .argument(&first)
            .argument(&second)
            .original_result()
    }

    pub fn get_caller_legacy(
        self,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, Address> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("get_caller_legacy")
            .original_result()
    }

    pub fn get_egld_balance(
        self,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, BigUint<Env::Api>> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("get_egld_balance")
            .original_result()
    }

    pub fn get_esdt_balance<
        Arg0: ProxyArg<TokenIdentifier<Env::Api>>,
        Arg1: ProxyArg<u64>,
    >(
        self,
        token_id: Arg0,
        nonce: Arg1,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, BigUint<Env::Api>> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("get_esdt_balance")
            .argument(&token_id)
            .argument(&nonce)
            .original_result()
    }

    pub fn receive_egld(
        self,
    ) -> TxTypedCall<Env, From, To, (), Gas, BigUint<Env::Api>> {
        self.wrapped_tx
            .raw_call("receive_egld")
            .original_result()
    }

    pub fn recieve_egld_half(
        self,
    ) -> TxTypedCall<Env, From, To, (), Gas, ()> {
        self.wrapped_tx
            .raw_call("recieve_egld_half")
            .original_result()
    }

    pub fn receive_esdt(
        self,
    ) -> TxTypedCall<Env, From, To, (), Gas, (TokenIdentifier<Env::Api>, BigUint<Env::Api>)> {
        self.wrapped_tx
            .raw_call("receive_esdt")
            .original_result()
    }

    pub fn reject_payment(
        self,
    ) -> TxTypedCall<Env, From, To, (), Gas, ()> {
        self.wrapped_tx
            .raw_call("reject_payment")
            .original_result()
    }

    pub fn receive_esdt_half(
        self,
    ) -> TxTypedCall<Env, From, To, (), Gas, ()> {
        self.wrapped_tx
            .raw_call("receive_esdt_half")
            .original_result()
    }

    pub fn receive_multi_esdt(
        self,
    ) -> TxTypedCall<Env, From, To, (), Gas, ManagedVec<Env::Api, EsdtTokenPayment<Env::Api>>> {
        self.wrapped_tx
            .raw_call("receive_multi_esdt")
            .original_result()
    }

    pub fn send_nft<
        Arg0: ProxyArg<ManagedAddress<Env::Api>>,
        Arg1: ProxyArg<TokenIdentifier<Env::Api>>,
        Arg2: ProxyArg<u64>,
        Arg3: ProxyArg<BigUint<Env::Api>>,
    >(
        self,
        to: Arg0,
        token_id: Arg1,
        nft_nonce: Arg2,
        amount: Arg3,
    ) -> TxTypedCall<Env, From, To, (), Gas, ()> {
        self.wrapped_tx
            .raw_call("send_nft")
            .argument(&to)
            .argument(&token_id)
            .argument(&nft_nonce)
            .argument(&amount)
            .original_result()
    }

    pub fn mint_esdt<
        Arg0: ProxyArg<TokenIdentifier<Env::Api>>,
        Arg1: ProxyArg<u64>,
        Arg2: ProxyArg<BigUint<Env::Api>>,
    >(
        self,
        token_id: Arg0,
        nonce: Arg1,
        amount: Arg2,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, ()> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("mint_esdt")
            .argument(&token_id)
            .argument(&nonce)
            .argument(&amount)
            .original_result()
    }

    pub fn burn_esdt<
        Arg0: ProxyArg<TokenIdentifier<Env::Api>>,
        Arg1: ProxyArg<u64>,
        Arg2: ProxyArg<BigUint<Env::Api>>,
    >(
        self,
        token_id: Arg0,
        nonce: Arg1,
        amount: Arg2,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, ()> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("burn_esdt")
            .argument(&token_id)
            .argument(&nonce)
            .argument(&amount)
            .original_result()
    }

    pub fn create_nft<
        Arg0: ProxyArg<TokenIdentifier<Env::Api>>,
        Arg1: ProxyArg<BigUint<Env::Api>>,
        Arg2: ProxyArg<NftDummyAttributes>,
    >(
        self,
        token_id: Arg0,
        amount: Arg1,
        attributes: Arg2,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, u64> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("create_nft")
            .argument(&token_id)
            .argument(&amount)
            .argument(&attributes)
            .original_result()
    }

    pub fn get_block_epoch(
        self,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, u64> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("get_block_epoch")
            .original_result()
    }

    pub fn get_block_nonce(
        self,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, u64> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("get_block_nonce")
            .original_result()
    }

    pub fn get_block_timestamp(
        self,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, u64> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("get_block_timestamp")
            .original_result()
    }

    pub fn get_random_buffer_once<
        Arg0: ProxyArg<usize>,
    >(
        self,
        len: Arg0,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, ManagedBuffer<Env::Api>> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("get_random_buffer_once")
            .argument(&len)
            .original_result()
    }

    pub fn get_random_buffer_twice<
        Arg0: ProxyArg<usize>,
        Arg1: ProxyArg<usize>,
    >(
        self,
        len1: Arg0,
        len2: Arg1,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, (ManagedBuffer<Env::Api>, ManagedBuffer<Env::Api>)> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("get_random_buffer_twice")
            .argument(&len1)
            .argument(&len2)
            .original_result()
    }

    pub fn call_other_contract_execute_on_dest<
        Arg0: ProxyArg<ManagedAddress<Env::Api>>,
    >(
        self,
        other_sc_address: Arg0,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, BigUint<Env::Api>> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("call_other_contract_execute_on_dest")
            .argument(&other_sc_address)
            .original_result()
    }

    pub fn call_other_contract_add_async_call<
        Arg0: ProxyArg<ManagedAddress<Env::Api>>,
        Arg1: ProxyArg<BigUint<Env::Api>>,
    >(
        self,
        other_sc_address: Arg0,
        value: Arg1,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, ()> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("call_other_contract_add_async_call")
            .argument(&other_sc_address)
            .argument(&value)
            .original_result()
    }

    pub fn get_total_value(
        self,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, BigUint<Env::Api>> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("getTotalValue")
            .original_result()
    }

    pub fn execute_on_dest_add_value<
        Arg0: ProxyArg<ManagedAddress<Env::Api>>,
        Arg1: ProxyArg<BigUint<Env::Api>>,
    >(
        self,
        other_sc_address: Arg0,
        value: Arg1,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, ()> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("execute_on_dest_add_value")
            .argument(&other_sc_address)
            .argument(&value)
            .original_result()
    }

    pub fn add<
        Arg0: ProxyArg<BigUint<Env::Api>>,
    >(
        self,
        value: Arg0,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, ()> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("addValue")
            .argument(&value)
            .original_result()
    }

    pub fn panic(
        self,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, ()> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("panic")
            .original_result()
    }
}

#[type_abi]
#[derive(TopEncode, TopDecode, Clone, Debug, PartialEq, Eq)]
pub struct NftDummyAttributes {
    pub creation_epoch: u64,
    pub cool_factor: u8,
}
