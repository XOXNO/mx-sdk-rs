use multiversx_chain_vm_executor::OpcodeCost;

pub enum Opcode {
    Block,
    Br,
    BrIf,
    BrTable,
    Call,
    CallIndirect,
    Catch,
    CatchAll,
    Delegate,
    Drop,
    Else,
    End,
    GlobalGet,
    GlobalSet,
    I32Add,
    I32And,
    I32Clz,
    I32Const,
    I32Ctz,
    I32DivS,
    I32DivU,
    I32Eq,
    I32Eqz,
    I32Extend16S,
    I32Extend8S,
    I32GeS,
    I32GeU,
    I32GtS,
    I32GtU,
    I32LeS,
    I32LeU,
    I32Load,
    I32Load16S,
    I32Load16U,
    I32Load8S,
    I32Load8U,
    I32LtS,
    I32LtU,
    I32Mul,
    I32Ne,
    I32Or,
    I32Popcnt,
    I32RemS,
    I32RemU,
    I32Rotl,
    I32Rotr,
    I32Shl,
    I32ShrS,
    I32ShrU,
    I32Store,
    I32Store16,
    I32Store8,
    I32Sub,
    I32WrapI64,
    I32Xor,
    I64Add,
    I64And,
    I64Clz,
    I64Const,
    I64Ctz,
    I64DivS,
    I64DivU,
    I64Eq,
    I64Eqz,
    I64Extend16S,
    I64Extend32S,
    I64Extend8S,
    I64ExtendI32S,
    I64ExtendI32U,
    I64GeS,
    I64GeU,
    I64GtS,
    I64GtU,
    I64LeS,
    I64LeU,
    I64Load,
    I64Load16S,
    I64Load16U,
    I64Load32S,
    I64Load32U,
    I64Load8S,
    I64Load8U,
    I64LtS,
    I64LtU,
    I64Mul,
    I64Ne,
    I64Or,
    I64Popcnt,
    I64RemS,
    I64RemU,
    I64Rotl,
    I64Rotr,
    I64Shl,
    I64ShrS,
    I64ShrU,
    I64Store,
    I64Store16,
    I64Store32,
    I64Store8,
    I64Sub,
    I64Xor,
    If,
    LocalGet,
    LocalSet,
    LocalTee,
    LocalAllocate,
    Loop,
    MemoryGrow,
    MemorySize,
    Nop,
    RefFunc,
    RefIsNull,
    RefNull,
    Rethrow,
    Return,
    ReturnCall,
    ReturnCallIndirect,
    Select,
    TableGet,
    TableGrow,
    TableInit,
    TableSet,
    TableSize,
    Throw,
    Try,
    TypedSelect,
    Unreachable,
    Unwind,
}

impl Opcode {
    pub fn get_cost(&self, opcode_cost: &OpcodeCost) -> u64 {
        match self {
            Opcode::Block => opcode_cost.opcode_block as u64,
            Opcode::Br => opcode_cost.opcode_br as u64,
            Opcode::BrIf => opcode_cost.opcode_brif as u64,
            Opcode::BrTable => opcode_cost.opcode_brtable as u64,
            Opcode::Call => opcode_cost.opcode_call as u64,
            Opcode::CallIndirect => opcode_cost.opcode_callindirect as u64,
            Opcode::Catch => opcode_cost.opcode_catch as u64,
            Opcode::CatchAll => opcode_cost.opcode_catchall as u64,
            Opcode::Delegate => opcode_cost.opcode_delegate as u64,
            Opcode::Drop => opcode_cost.opcode_drop as u64,
            Opcode::Else => opcode_cost.opcode_else as u64,
            Opcode::End => opcode_cost.opcode_end as u64,
            Opcode::GlobalGet => opcode_cost.opcode_globalget as u64,
            Opcode::GlobalSet => opcode_cost.opcode_globalset as u64,
            Opcode::I32Add => opcode_cost.opcode_i32add as u64,
            Opcode::I32And => opcode_cost.opcode_i32and as u64,
            Opcode::I32Clz => opcode_cost.opcode_i32clz as u64,
            Opcode::I32Const => opcode_cost.opcode_i32const as u64,
            Opcode::I32Ctz => opcode_cost.opcode_i32ctz as u64,
            Opcode::I32DivS => opcode_cost.opcode_i32divs as u64,
            Opcode::I32DivU => opcode_cost.opcode_i32divu as u64,
            Opcode::I32Eq => opcode_cost.opcode_i32eq as u64,
            Opcode::I32Eqz => opcode_cost.opcode_i32eqz as u64,
            Opcode::I32Extend16S => opcode_cost.opcode_i32extend16s as u64,
            Opcode::I32Extend8S => opcode_cost.opcode_i32extend8s as u64,
            Opcode::I32GeS => opcode_cost.opcode_i32ges as u64,
            Opcode::I32GeU => opcode_cost.opcode_i32geu as u64,
            Opcode::I32GtS => opcode_cost.opcode_i32gts as u64,
            Opcode::I32GtU => opcode_cost.opcode_i32gtu as u64,
            Opcode::I32LeS => opcode_cost.opcode_i32les as u64,
            Opcode::I32LeU => opcode_cost.opcode_i32leu as u64,
            Opcode::I32Load => opcode_cost.opcode_i32load as u64,
            Opcode::I32Load16S => opcode_cost.opcode_i32load16s as u64,
            Opcode::I32Load16U => opcode_cost.opcode_i32load16u as u64,
            Opcode::I32Load8S => opcode_cost.opcode_i32load8s as u64,
            Opcode::I32Load8U => opcode_cost.opcode_i32load8u as u64,
            Opcode::I32LtS => opcode_cost.opcode_i32lts as u64,
            Opcode::I32LtU => opcode_cost.opcode_i32ltu as u64,
            Opcode::I32Mul => opcode_cost.opcode_i32mul as u64,
            Opcode::I32Ne => opcode_cost.opcode_i32ne as u64,
            Opcode::I32Or => opcode_cost.opcode_i32or as u64,
            Opcode::I32Popcnt => opcode_cost.opcode_i32popcnt as u64,
            Opcode::I32RemS => opcode_cost.opcode_i32rems as u64,
            Opcode::I32RemU => opcode_cost.opcode_i32remu as u64,
            Opcode::I32Rotl => opcode_cost.opcode_i32rotl as u64,
            Opcode::I32Rotr => opcode_cost.opcode_i32rotr as u64,
            Opcode::I32Shl => opcode_cost.opcode_i32shl as u64,
            Opcode::I32ShrS => opcode_cost.opcode_i32shrs as u64,
            Opcode::I32ShrU => opcode_cost.opcode_i32shru as u64,
            Opcode::I32Store => opcode_cost.opcode_i32store as u64,
            Opcode::I32Store16 => opcode_cost.opcode_i32store16 as u64,
            Opcode::I32Store8 => opcode_cost.opcode_i32store8 as u64,
            Opcode::I32Sub => opcode_cost.opcode_i32sub as u64,
            Opcode::I32WrapI64 => opcode_cost.opcode_i32wrapi64 as u64,
            Opcode::I32Xor => opcode_cost.opcode_i32xor as u64,
            Opcode::I64Add => opcode_cost.opcode_i64add as u64,
            Opcode::I64And => opcode_cost.opcode_i64and as u64,
            Opcode::I64Clz => opcode_cost.opcode_i64clz as u64,
            Opcode::I64Const => opcode_cost.opcode_i64const as u64,
            Opcode::I64Ctz => opcode_cost.opcode_i64ctz as u64,
            Opcode::I64DivS => opcode_cost.opcode_i64divs as u64,
            Opcode::I64DivU => opcode_cost.opcode_i64divu as u64,
            Opcode::I64Eq => opcode_cost.opcode_i64eq as u64,
            Opcode::I64Eqz => opcode_cost.opcode_i64eqz as u64,
            Opcode::I64Extend16S => opcode_cost.opcode_i64extend16s as u64,
            Opcode::I64Extend32S => opcode_cost.opcode_i64extend32s as u64,
            Opcode::I64Extend8S => opcode_cost.opcode_i64extend8s as u64,
            Opcode::I64ExtendI32S => opcode_cost.opcode_i64extendi32s as u64,
            Opcode::I64ExtendI32U => opcode_cost.opcode_i64extendi32u as u64,
            Opcode::I64GeS => opcode_cost.opcode_i64ges as u64,
            Opcode::I64GeU => opcode_cost.opcode_i64geu as u64,
            Opcode::I64GtS => opcode_cost.opcode_i64gts as u64,
            Opcode::I64GtU => opcode_cost.opcode_i64gtu as u64,
            Opcode::I64LeS => opcode_cost.opcode_i64les as u64,
            Opcode::I64LeU => opcode_cost.opcode_i64leu as u64,
            Opcode::I64Load => opcode_cost.opcode_i64load as u64,
            Opcode::I64Load16S => opcode_cost.opcode_i64load16s as u64,
            Opcode::I64Load16U => opcode_cost.opcode_i64load16u as u64,
            Opcode::I64Load32S => opcode_cost.opcode_i64load32s as u64,
            Opcode::I64Load32U => opcode_cost.opcode_i64load32u as u64,
            Opcode::I64Load8S => opcode_cost.opcode_i64load8s as u64,
            Opcode::I64Load8U => opcode_cost.opcode_i64load8u as u64,
            Opcode::I64LtS => opcode_cost.opcode_i64lts as u64,
            Opcode::I64LtU => opcode_cost.opcode_i64ltu as u64,
            Opcode::I64Mul => opcode_cost.opcode_i64mul as u64,
            Opcode::I64Ne => opcode_cost.opcode_i64ne as u64,
            Opcode::I64Or => opcode_cost.opcode_i64or as u64,
            Opcode::I64Popcnt => opcode_cost.opcode_i64popcnt as u64,
            Opcode::I64RemS => opcode_cost.opcode_i64rems as u64,
            Opcode::I64RemU => opcode_cost.opcode_i64remu as u64,
            Opcode::I64Rotl => opcode_cost.opcode_i64rotl as u64,
            Opcode::I64Rotr => opcode_cost.opcode_i64rotr as u64,
            Opcode::I64Shl => opcode_cost.opcode_i64shl as u64,
            Opcode::I64ShrS => opcode_cost.opcode_i64shrs as u64,
            Opcode::I64ShrU => opcode_cost.opcode_i64shru as u64,
            Opcode::I64Store => opcode_cost.opcode_i64store as u64,
            Opcode::I64Store16 => opcode_cost.opcode_i64store16 as u64,
            Opcode::I64Store32 => opcode_cost.opcode_i64store32 as u64,
            Opcode::I64Store8 => opcode_cost.opcode_i64store8 as u64,
            Opcode::I64Sub => opcode_cost.opcode_i64sub as u64,
            Opcode::I64Xor => opcode_cost.opcode_i64xor as u64,
            Opcode::If => opcode_cost.opcode_if as u64,
            Opcode::LocalGet => opcode_cost.opcode_localget as u64,
            Opcode::LocalSet => opcode_cost.opcode_localset as u64,
            Opcode::LocalTee => opcode_cost.opcode_localtee as u64,
            Opcode::LocalAllocate => opcode_cost.opcode_localallocate as u64,
            Opcode::Loop => opcode_cost.opcode_loop as u64,
            Opcode::MemoryGrow => opcode_cost.opcode_memorygrow as u64,
            Opcode::MemorySize => opcode_cost.opcode_memorysize as u64,
            Opcode::Nop => opcode_cost.opcode_nop as u64,
            Opcode::RefFunc => opcode_cost.opcode_reffunc as u64,
            Opcode::RefIsNull => opcode_cost.opcode_refisnull as u64,
            Opcode::RefNull => opcode_cost.opcode_refnull as u64,
            Opcode::Rethrow => opcode_cost.opcode_rethrow as u64,
            Opcode::Return => opcode_cost.opcode_return as u64,
            Opcode::ReturnCall => opcode_cost.opcode_returncall as u64,
            Opcode::ReturnCallIndirect => opcode_cost.opcode_returncallindirect as u64,
            Opcode::Select => opcode_cost.opcode_select as u64,
            Opcode::TableGet => opcode_cost.opcode_tableget as u64,
            Opcode::TableGrow => opcode_cost.opcode_tablegrow as u64,
            Opcode::TableInit => opcode_cost.opcode_tableinit as u64,
            Opcode::TableSet => opcode_cost.opcode_tableset as u64,
            Opcode::TableSize => opcode_cost.opcode_tablesize as u64,
            Opcode::Throw => opcode_cost.opcode_throw as u64,
            Opcode::Try => opcode_cost.opcode_try as u64,
            Opcode::TypedSelect => opcode_cost.opcode_typedselect as u64,
            Opcode::Unreachable => opcode_cost.opcode_unreachable as u64,
            Opcode::Unwind => opcode_cost.opcode_unwind as u64,
        }
    }
}
